// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /home/eitan/.local/share/flatpak/exports/share/gir-1.0
// from /home/eitan/Projects/spiel/libspeechprovider/build/libspeechprovider
// from /usr/local/share/gir-1.0
// from /usr/share/gir-1.0
// from /var/lib/flatpak/exports/share/gir-1.0
// DO NOT EDIT

#![cfg(unix)]

use speechprovider_sys::*;
use std::mem::{align_of, size_of};
use std::env;
use std::error::Error;
use std::ffi::OsString;
use std::path::Path;
use std::process::{Command, Stdio};
use std::str;
use tempfile::Builder;

static PACKAGES: &[&str] = &["speech-provider-1.0"];

#[derive(Clone, Debug)]
struct Compiler {
    pub args: Vec<String>,
}

impl Compiler {
    pub fn new() -> Result<Self, Box<dyn Error>> {
        let mut args = get_var("CC", "cc")?;
        args.push("-Wno-deprecated-declarations".to_owned());
        // For _Generic
        args.push("-std=c11".to_owned());
        // For %z support in printf when using MinGW.
        args.push("-D__USE_MINGW_ANSI_STDIO".to_owned());
        args.extend(get_var("CFLAGS", "")?);
        args.extend(get_var("CPPFLAGS", "")?);
        args.extend(pkg_config_cflags(PACKAGES)?);
        Ok(Self { args })
    }

    pub fn compile(&self, src: &Path, out: &Path) -> Result<(), Box<dyn Error>> {
        let mut cmd = self.to_command();
        cmd.arg(src);
        cmd.arg("-o");
        cmd.arg(out);
        let status = cmd.spawn()?.wait()?;
        if !status.success() {
            return Err(format!("compilation command {cmd:?} failed, {status}").into());
        }
        Ok(())
    }

    fn to_command(&self) -> Command {
        let mut cmd = Command::new(&self.args[0]);
        cmd.args(&self.args[1..]);
        cmd
    }
}

fn get_var(name: &str, default: &str) -> Result<Vec<String>, Box<dyn Error>> {
    match env::var(name) {
        Ok(value) => Ok(shell_words::split(&value)?),
        Err(env::VarError::NotPresent) => Ok(shell_words::split(default)?),
        Err(err) => Err(format!("{name} {err}").into()),
    }
}

fn pkg_config_cflags(packages: &[&str]) -> Result<Vec<String>, Box<dyn Error>> {
    if packages.is_empty() {
        return Ok(Vec::new());
    }
    let pkg_config = env::var_os("PKG_CONFIG")
        .unwrap_or_else(|| OsString::from("pkg-config"));
    let mut cmd = Command::new(pkg_config);
    cmd.arg("--cflags");
    cmd.args(packages);
    cmd.stderr(Stdio::inherit());
    let out = cmd.output()?;
    if !out.status.success() {
        let (status, stdout) = (out.status, String::from_utf8_lossy(&out.stdout));
        return Err(format!("command {cmd:?} failed, {status:?}\nstdout: {stdout}").into());
    }
    let stdout = str::from_utf8(&out.stdout)?;
    Ok(shell_words::split(stdout.trim())?)
}


#[derive(Copy, Clone, Debug, Eq, PartialEq)]
struct Layout {
    size: usize,
    alignment: usize,
}

#[derive(Copy, Clone, Debug, Default, Eq, PartialEq)]
struct Results {
    /// Number of successfully completed tests.
    passed: usize,
    /// Total number of failed tests (including those that failed to compile).
    failed: usize,
}

impl Results {
    fn record_passed(&mut self) {
        self.passed += 1;
    }
    fn record_failed(&mut self) {
        self.failed += 1;
    }
    fn summary(&self) -> String {
        format!("{} passed; {} failed", self.passed, self.failed)
    }
    fn expect_total_success(&self) {
        if self.failed == 0 {
            println!("OK: {}", self.summary());
        } else {
            panic!("FAILED: {}", self.summary());
        };
    }
}

#[test]
fn cross_validate_constants_with_c() {
    let mut c_constants: Vec<(String, String)> = Vec::new();

    for l in get_c_output("constant").unwrap().lines() {
        let (name, value) = l.split_once(';').expect("Missing ';' separator");
        c_constants.push((name.to_owned(), value.to_owned()));
    }

    let mut results = Results::default();

    for ((rust_name, rust_value), (c_name, c_value)) in
        RUST_CONSTANTS.iter().zip(c_constants.iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {rust_name:?}\nC:    {c_name:?}");
            continue;
        }

        if rust_value != c_value {
            results.record_failed();
            eprintln!(
                "Constant value mismatch for {rust_name}\nRust: {rust_value:?}\nC:    {c_value:?}",
            );
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

#[test]
fn cross_validate_layout_with_c() {
    let mut c_layouts = Vec::new();

    for l in get_c_output("layout").unwrap().lines() {
        let (name, value) = l.split_once(';').expect("Missing first ';' separator");
        let (size, alignment) = value.split_once(';').expect("Missing second ';' separator");
        let size = size.parse().expect("Failed to parse size");
        let alignment = alignment.parse().expect("Failed to parse alignment");
        c_layouts.push((name.to_owned(), Layout { size, alignment }));
    }

    let mut results = Results::default();

    for ((rust_name, rust_layout), (c_name, c_layout)) in
        RUST_LAYOUTS.iter().zip(c_layouts.iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {rust_name:?}\nC:    {c_name:?}");
            continue;
        }

        if rust_layout != c_layout {
            results.record_failed();
            eprintln!(
                "Layout mismatch for {rust_name}\nRust: {rust_layout:?}\nC:    {c_layout:?}",
            );
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

fn get_c_output(name: &str) -> Result<String, Box<dyn Error>> {
    let tmpdir = Builder::new().prefix("abi").tempdir()?;
    let exe = tmpdir.path().join(name);
    let c_file = Path::new("tests").join(name).with_extension("c");

    let cc = Compiler::new().expect("configured compiler");
    cc.compile(&c_file, &exe)?;

    let mut cmd = Command::new(exe);
    cmd.stderr(Stdio::inherit());
    let out = cmd.output()?;
    if !out.status.success() {
        let (status, stdout) = (out.status, String::from_utf8_lossy(&out.stdout));
        return Err(format!("command {cmd:?} failed, {status:?}\nstdout: {stdout}").into());
    }

    Ok(String::from_utf8(out.stdout)?)
}

const RUST_LAYOUTS: &[(&str, Layout)] = &[
    ("SpeechProviderChunkType", Layout {size: size_of::<SpeechProviderChunkType>(), alignment: align_of::<SpeechProviderChunkType>()}),
    ("SpeechProviderEventData", Layout {size: size_of::<SpeechProviderEventData>(), alignment: align_of::<SpeechProviderEventData>()}),
    ("SpeechProviderEventType", Layout {size: size_of::<SpeechProviderEventType>(), alignment: align_of::<SpeechProviderEventType>()}),
    ("SpeechProviderStreamHeader", Layout {size: size_of::<SpeechProviderStreamHeader>(), alignment: align_of::<SpeechProviderStreamHeader>()}),
    ("SpeechProviderStreamReaderClass", Layout {size: size_of::<SpeechProviderStreamReaderClass>(), alignment: align_of::<SpeechProviderStreamReaderClass>()}),
    ("SpeechProviderStreamWriterClass", Layout {size: size_of::<SpeechProviderStreamWriterClass>(), alignment: align_of::<SpeechProviderStreamWriterClass>()}),
    ("SpeechProviderVoiceFeature", Layout {size: size_of::<SpeechProviderVoiceFeature>(), alignment: align_of::<SpeechProviderVoiceFeature>()}),
];

const RUST_CONSTANTS: &[(&str, &str)] = &[
    ("(gint) SPEECH_PROVIDER_CHUNK_TYPE_AUDIO", "1"),
    ("(gint) SPEECH_PROVIDER_CHUNK_TYPE_EVENT", "2"),
    ("(gint) SPEECH_PROVIDER_CHUNK_TYPE_NONE", "0"),
    ("(gint) SPEECH_PROVIDER_EVENT_TYPE_MARK", "4"),
    ("(gint) SPEECH_PROVIDER_EVENT_TYPE_NONE", "0"),
    ("(gint) SPEECH_PROVIDER_EVENT_TYPE_RANGE", "3"),
    ("(gint) SPEECH_PROVIDER_EVENT_TYPE_SENTENCE", "2"),
    ("(gint) SPEECH_PROVIDER_EVENT_TYPE_WORD", "1"),
    ("SPEECH_PROVIDER_STREAM_PROTOCOL_VERSION", "0.01"),
    ("(guint) SPEECH_PROVIDER_VOICE_FEATURE_EVENTS_RANGE", "4"),
    ("(guint) SPEECH_PROVIDER_VOICE_FEATURE_EVENTS_SENTENCE", "2"),
    ("(guint) SPEECH_PROVIDER_VOICE_FEATURE_EVENTS_SSML_MARK", "8"),
    ("(guint) SPEECH_PROVIDER_VOICE_FEATURE_EVENTS_WORD", "1"),
    ("(guint) SPEECH_PROVIDER_VOICE_FEATURE_NONE", "0"),
    ("(guint) SPEECH_PROVIDER_VOICE_FEATURE_SSML_BREAK", "4096"),
    ("(guint) SPEECH_PROVIDER_VOICE_FEATURE_SSML_EMPHASIS", "32768"),
    ("(guint) SPEECH_PROVIDER_VOICE_FEATURE_SSML_PHONEME", "16384"),
    ("(guint) SPEECH_PROVIDER_VOICE_FEATURE_SSML_PROSODY", "65536"),
    ("(guint) SPEECH_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_CARDINAL", "512"),
    ("(guint) SPEECH_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_CHARACTERS", "128"),
    ("(guint) SPEECH_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_CHARACTERS_GLYPHS", "256"),
    ("(guint) SPEECH_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_CURRENCY", "2048"),
    ("(guint) SPEECH_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_DATE", "16"),
    ("(guint) SPEECH_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_ORDINAL", "1024"),
    ("(guint) SPEECH_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_TELEPHONE", "64"),
    ("(guint) SPEECH_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_TIME", "32"),
    ("(guint) SPEECH_PROVIDER_VOICE_FEATURE_SSML_SENTENCE_PARAGRAPH", "131072"),
    ("(guint) SPEECH_PROVIDER_VOICE_FEATURE_SSML_SUB", "8192"),
    ("(guint) SPEECH_PROVIDER_VOICE_FEATURE_SSML_TOKEN", "262144"),
];


