// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /home/eitan/.local/share/flatpak/exports/share/gir-1.0
// from /home/eitan/Projects/spiel/libspeechprovider/build/libspeechprovider
// from /usr/local/share/gir-1.0
// from /usr/share/gir-1.0
// from /var/lib/flatpak/exports/share/gir-1.0
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(clippy::approx_constant, clippy::type_complexity, clippy::unreadable_literal, clippy::upper_case_acronyms)]
#![cfg_attr(docsrs, feature(doc_cfg))]

use glib_sys as glib;
use gobject_sys as gobject;

#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Enums
pub type SpeechProviderChunkType = c_int;
pub const SPEECH_PROVIDER_CHUNK_TYPE_NONE: SpeechProviderChunkType = 0;
pub const SPEECH_PROVIDER_CHUNK_TYPE_AUDIO: SpeechProviderChunkType = 1;
pub const SPEECH_PROVIDER_CHUNK_TYPE_EVENT: SpeechProviderChunkType = 2;

pub type SpeechProviderEventType = c_int;
pub const SPEECH_PROVIDER_EVENT_TYPE_NONE: SpeechProviderEventType = 0;
pub const SPEECH_PROVIDER_EVENT_TYPE_WORD: SpeechProviderEventType = 1;
pub const SPEECH_PROVIDER_EVENT_TYPE_SENTENCE: SpeechProviderEventType = 2;
pub const SPEECH_PROVIDER_EVENT_TYPE_RANGE: SpeechProviderEventType = 3;
pub const SPEECH_PROVIDER_EVENT_TYPE_MARK: SpeechProviderEventType = 4;

// Constants
pub const SPEECH_PROVIDER_STREAM_PROTOCOL_VERSION: &[u8] = b"0.01\0";

// Flags
pub type SpeechProviderVoiceFeature = c_uint;
pub const SPEECH_PROVIDER_VOICE_FEATURE_NONE: SpeechProviderVoiceFeature = 0;
pub const SPEECH_PROVIDER_VOICE_FEATURE_EVENTS_WORD: SpeechProviderVoiceFeature = 1;
pub const SPEECH_PROVIDER_VOICE_FEATURE_EVENTS_SENTENCE: SpeechProviderVoiceFeature = 2;
pub const SPEECH_PROVIDER_VOICE_FEATURE_EVENTS_RANGE: SpeechProviderVoiceFeature = 4;
pub const SPEECH_PROVIDER_VOICE_FEATURE_EVENTS_SSML_MARK: SpeechProviderVoiceFeature = 8;
pub const SPEECH_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_DATE: SpeechProviderVoiceFeature = 16;
pub const SPEECH_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_TIME: SpeechProviderVoiceFeature = 32;
pub const SPEECH_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_TELEPHONE: SpeechProviderVoiceFeature = 64;
pub const SPEECH_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_CHARACTERS: SpeechProviderVoiceFeature = 128;
pub const SPEECH_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_CHARACTERS_GLYPHS: SpeechProviderVoiceFeature = 256;
pub const SPEECH_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_CARDINAL: SpeechProviderVoiceFeature = 512;
pub const SPEECH_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_ORDINAL: SpeechProviderVoiceFeature = 1024;
pub const SPEECH_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_CURRENCY: SpeechProviderVoiceFeature = 2048;
pub const SPEECH_PROVIDER_VOICE_FEATURE_SSML_BREAK: SpeechProviderVoiceFeature = 4096;
pub const SPEECH_PROVIDER_VOICE_FEATURE_SSML_SUB: SpeechProviderVoiceFeature = 8192;
pub const SPEECH_PROVIDER_VOICE_FEATURE_SSML_PHONEME: SpeechProviderVoiceFeature = 16384;
pub const SPEECH_PROVIDER_VOICE_FEATURE_SSML_EMPHASIS: SpeechProviderVoiceFeature = 32768;
pub const SPEECH_PROVIDER_VOICE_FEATURE_SSML_PROSODY: SpeechProviderVoiceFeature = 65536;
pub const SPEECH_PROVIDER_VOICE_FEATURE_SSML_SENTENCE_PARAGRAPH: SpeechProviderVoiceFeature = 131072;
pub const SPEECH_PROVIDER_VOICE_FEATURE_SSML_TOKEN: SpeechProviderVoiceFeature = 262144;

// Records
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SpeechProviderEventData {
    pub event_type: u8,
    pub range_start: u32,
    pub range_end: u32,
    pub mark_name_length: u32,
}

impl ::std::fmt::Debug for SpeechProviderEventData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("SpeechProviderEventData @ {self:p}"))
         .field("event_type", &self.event_type)
         .field("range_start", &self.range_start)
         .field("range_end", &self.range_end)
         .field("mark_name_length", &self.mark_name_length)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct SpeechProviderStreamHeader {
    pub version: [c_char; 4],
}

impl ::std::fmt::Debug for SpeechProviderStreamHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("SpeechProviderStreamHeader @ {self:p}"))
         .field("version", &self.version)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct SpeechProviderStreamReaderClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for SpeechProviderStreamReaderClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("SpeechProviderStreamReaderClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct SpeechProviderStreamWriterClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for SpeechProviderStreamWriterClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("SpeechProviderStreamWriterClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

// Classes
#[repr(C)]
pub struct SpeechProviderStreamReader {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for SpeechProviderStreamReader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("SpeechProviderStreamReader @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
pub struct SpeechProviderStreamWriter {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for SpeechProviderStreamWriter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("SpeechProviderStreamWriter @ {self:p}"))
         .finish()
    }
}

#[link(name = "speech-provider-1.0")]
extern "C" {

    //=========================================================================
    // SpeechProviderVoiceFeature
    //=========================================================================
    pub fn speech_provider_voice_feature_get_type() -> GType;

    //=========================================================================
    // SpeechProviderStreamReader
    //=========================================================================
    pub fn speech_provider_stream_reader_get_type() -> GType;
    pub fn speech_provider_stream_reader_new(fd: c_int) -> *mut SpeechProviderStreamReader;
    pub fn speech_provider_stream_reader_close(self_: *mut SpeechProviderStreamReader);
    pub fn speech_provider_stream_reader_get_audio(self_: *mut SpeechProviderStreamReader, chunk: *mut *mut u8, chunk_size: *mut u32) -> gboolean;
    pub fn speech_provider_stream_reader_get_event(self_: *mut SpeechProviderStreamReader, event_type: *mut SpeechProviderEventType, range_start: *mut u32, range_end: *mut u32, mark_name: *mut *mut c_char) -> gboolean;
    pub fn speech_provider_stream_reader_get_stream_header(self_: *mut SpeechProviderStreamReader) -> gboolean;

    //=========================================================================
    // SpeechProviderStreamWriter
    //=========================================================================
    pub fn speech_provider_stream_writer_get_type() -> GType;
    pub fn speech_provider_stream_writer_new(fd: c_int) -> *mut SpeechProviderStreamWriter;
    pub fn speech_provider_stream_writer_close(self_: *mut SpeechProviderStreamWriter);
    pub fn speech_provider_stream_writer_send_audio(self_: *mut SpeechProviderStreamWriter, chunk: *mut u8, chunk_size: u32);
    pub fn speech_provider_stream_writer_send_event(self_: *mut SpeechProviderStreamWriter, event_type: SpeechProviderEventType, range_start: u32, range_end: u32, mark_name: *const c_char);
    pub fn speech_provider_stream_writer_send_stream_header(self_: *mut SpeechProviderStreamWriter);

}
